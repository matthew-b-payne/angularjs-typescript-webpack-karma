{
    "sourceFile": "app/client/epay/epay-ui-state-service.spec.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1646431879340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1646432162106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,12 @@\n \n describe('EpayUIStateService', function() {\n   let epayUIState\n \n-  beforeEach(module('app.client.epay'))\n+  beforeEach(angular.mock.module('app.client.epay'))\n \n   beforeEach(function() {\n-    module(function($provide) {\n+    angular.mock.module(function($provide) {\n \n     })\n \n     inject(function($injector) {\n"
                },
                {
                    "date": 1646432327593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import * as angular from 'angular'\n import \"angular-mocks\"\n import * as sinon from 'sinon'\n+import { expect } from 'chai'\n \n describe('EpayUIStateService', function() {\n   let epayUIState\n \n"
                },
                {
                    "date": 1646432364065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,8 @@\n \n   beforeEach(angular.mock.module('app.client.epay'))\n \n   beforeEach(function() {\n-    angular.mock.module(function($provide) {\n-\n-    })\n-\n     inject(function($injector) {\n       epayUIState = $injector.get('epayUIState')\n     })\n   })\n"
                },
                {
                    "date": 1646680850494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n describe('EpayUIStateService', function() {\n   let epayUIState\n \n   beforeEach(angular.mock.module('app.client.epay'))\n+  beforeEach(angular.mock.module('unitTestData'))\n \n   beforeEach(function() {\n     inject(function($injector) {\n       epayUIState = $injector.get('epayUIState')\n"
                }
            ],
            "date": 1646431879340,
            "name": "Commit-0",
            "content": "import * as angular from 'angular'\nimport \"angular-mocks\"\nimport * as sinon from 'sinon'\n\ndescribe('EpayUIStateService', function() {\n  let epayUIState\n\n  beforeEach(module('app.client.epay'))\n\n  beforeEach(function() {\n    module(function($provide) {\n\n    })\n\n    inject(function($injector) {\n      epayUIState = $injector.get('epayUIState')\n    })\n  })\n\n  function _resolveReviewViewDataPoints(a, b, c, d) {\n    const {scenario} = epayUIState._resolveReviewViewDataPoints(a, b, c, d)\n\n    return scenario\n  }\n\n  describe('_resolveReviewViewDataPoints: initialPaymentAccount|pennCheckPaymentAccount|isSavedAccount|isCardPayment', function() {\n    it('0000 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, false, false, false)).to.equal('ErrorCondition')\n    })\n\n    it('0001 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, false, false, true)).to.equal('ErrorCondition')\n    })\n\n    it('0011 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, false, true, true)).to.equal('ErrorCondition')\n    })\n\n    it('0111 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, true, true, true)).to.equal('ErrorCondition')\n    })\n\n    it('should return PennCheck1', function() {\n      expect(_resolveReviewViewDataPoints(false, true, false, false)).to.equal('PennCheck1')\n    })\n\n    it('0110 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, true, true, false)).to.equal('ErrorCondition')\n    })\n\n    it('0101 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, true, true, false)).to.equal('ErrorCondition')\n    })\n\n    it('0010 should return ErrorCondition', function() {\n      expect(_resolveReviewViewDataPoints(false, true, true, false)).to.equal('ErrorCondition')\n    })\n\n    it('1000 should return NoPennCheck1', function() {\n      expect(_resolveReviewViewDataPoints(true, false, false, false)).to.equal('NoPennCheck1')\n    })\n\n    it('1001 should return NoPennCheck2', function() {\n      expect(_resolveReviewViewDataPoints(true, false, false, true)).to.equal('NoPennCheck2')\n    })\n\n    it('1011 should return NoPennCheck4', function() {\n      expect(_resolveReviewViewDataPoints(true, false, true, true)).to.equal('NoPennCheck4')\n    })\n\n    it('1111 should return PennCheck4', function() {\n      expect(_resolveReviewViewDataPoints(true, true, true, true)).to.equal('PennCheck4')\n    })\n\n    it('1100 should return PennCheck1', function() {\n      expect(_resolveReviewViewDataPoints(true, true, false, false)).to.equal('PennCheck1')\n    })\n\n    it('1110 should return PennCheck3', function() {\n      expect(_resolveReviewViewDataPoints(true, true, true, false)).to.equal('PennCheck3')\n    })\n\n    it('1101 should return PennCheck2', function() {\n      expect(_resolveReviewViewDataPoints(true, true, false, true)).to.equal('PennCheck2')\n    })\n\n    it('1010 should return NoPennCheck3', function() {\n      expect(_resolveReviewViewDataPoints(true, false, true, false)).to.equal('NoPennCheck3')\n    })\n  })\n\n  function _resolvePaymentViewScenarioName(a, b, c, d) {\n    const {scenario} = epayUIState._resolvePaymentViewScenarioName(a, b, c, d)\n\n    return scenario\n  }\n\n  describe('_resolvePaymentViewScenarioName: isPennCheck|hasSavedAccounts|canUseCreditCards|ccLimitExceeded', function() {\n    it('0000 should return NoPennCheck1', function() {\n      expect(_resolvePaymentViewScenarioName(false, false, false, false)).to.equal('NoPennCheck1')\n    })\n\n    it('0001 should return NoPennCheck1', function() {\n      expect(_resolvePaymentViewScenarioName(false, false, false, true)).to.equal('NoPennCheck1')\n    })\n\n    it('0011 should return NoPennCheck1', function() {\n      expect(_resolvePaymentViewScenarioName(false, false, true, true)).to.equal('NoPennCheck1')\n    })\n\n    it('0111 should return NoPennCheck4', function() {\n      expect(_resolvePaymentViewScenarioName(false, true, true, true)).to.equal('NoPennCheck4')\n    })\n\n    it('0100 should return NoPennCheck4', function() {\n      expect(_resolvePaymentViewScenarioName(false, true, false, false)).to.equal('NoPennCheck4')\n    })\n\n    it('0110 should return NoPennCheck3', function() {\n      expect(_resolvePaymentViewScenarioName(false, true, true, false)).to.equal('NoPennCheck3')\n    })\n\n    it('0101 should return NoPennCheck4', function() {\n      expect(_resolvePaymentViewScenarioName(false, true, false, true)).to.equal('NoPennCheck4')\n    })\n\n    it('0010 should return NoPennCheck2', function() {\n      expect(_resolvePaymentViewScenarioName(false, false, true, false)).to.equal('NoPennCheck2')\n    })\n\n    it('1000 should return PennCheck1', function() {\n      expect(_resolvePaymentViewScenarioName(true, false, false, false)).to.equal('PennCheck1')\n    })\n\n    it('1001 should return PennCheck1', function() {\n      expect(_resolvePaymentViewScenarioName(true, false, false, true)).to.equal('PennCheck1')\n    })\n\n    it('1011 should return PennCheck1', function() {\n      expect(_resolvePaymentViewScenarioName(true, false, true, true)).to.equal('PennCheck1')\n    })\n\n    it('1111 should return PennCheck4', function() {\n      expect(_resolvePaymentViewScenarioName(true, true, true, true)).to.equal('PennCheck4')\n    })\n\n    it('1100 should return PennCheck4', function() {\n      expect(_resolvePaymentViewScenarioName(true, true, false, false)).to.equal('PennCheck4')\n    })\n\n    it('1110 should return PennCheck3', function() {\n      expect(_resolvePaymentViewScenarioName(true, true, true, false)).to.equal('PennCheck3')\n    })\n\n    it('1101 should return PennCheck4', function() {\n      expect(_resolvePaymentViewScenarioName(true, true, false, false)).to.equal('PennCheck4')\n    })\n\n    it('1010 should return PennCheck2', function() {\n      expect(_resolvePaymentViewScenarioName(true, false, true, false)).to.equal('PennCheck2')\n    })\n  })\n})\n"
        }
    ]
}